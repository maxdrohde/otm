---
title: "Simulation Analysis"
subtitle: "Paper 2"
author: "Max Rohde"
date: today
toc: true
toc-depth: 4
toc-location: left
knitr:
  opts_chunk: 
    dev: "ragg_png"
format:
  html:
    code-tools: true
    code-fold: false
    code-link: true
    standalone: true
    embed-resources: true
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"
    mainfont: Source Sans Pro
    theme: cosmo
    fontsize: 16px
    fig-format: retina
    fig-cap-location: margin
    tbl-cap-location: top
    reference-location: margin
    citation-location: margin
    fig-width: 8
    fig-height: 6
  
execute:
  warning: false
  message: false
---

# Load packages

```{r}
library(tidyverse)
library(patchwork)

# Set global ggplot theme
theme_set(cowplot::theme_cowplot(font_size=12,
                                 font_family = "Source Sans Pro"))
```

# Read data

```{r}
df <-
  read_csv("simulation_results.csv") |>
  filter(prop_na < 0.1)

df_wide <-
  df |>
  select(-prop_na) |>
  pivot_wider(names_from = model,
              values_from = power)
```

# Clean data

```{r}
df$type <-
case_when(
  grepl("otm_rand_int_slope", df$model, fixed = TRUE) ~ "OTM-IS",
  grepl("otm_rand_int", df$model, fixed = TRUE) ~ "OTM-I",
  grepl("rand_int_slope", df$model, fixed = TRUE) ~ "RIS",
  grepl("rand_int", df$model, fixed = TRUE) ~ "RI",
  grepl("otm", df$model, fixed = TRUE) ~ "OTM",
  grepl("cox", df$model, fixed = TRUE) ~ "COX",
  grepl("ppo", df$model, fixed = TRUE) ~ "PO",
  grepl("free", df$model, fixed = TRUE) ~ "FR_DAY"
)

df$type <- factor(df$type, levels = unique(df$type))
df$model <- factor(df$model, levels = unique(df$model))
```

```{r}
model_names <-
  c("OTM",
    "OTM + Random Intercept",
    "Random Intercept (longitudinal)",
    "Free Days (8)",
    "Free Days (7 to 8)",
    "Free Days (6 to 8)",
    "Free Days (5 to 8)",
    "Free Days (4 to 8)",
    "Free Days (3 to 8)",
    "Free Days (1 to 8)",
    "Prop Odds Day 3",
    "Prop Odds Day 7",
    "Prop Odds Day 14",
    "Prop Odds Day 21",
    "Prop Odds Day 28",
    "Cox State 1",
    "Cox State 1 (Spline)",
    "Cox State 1-2",
    "Cox State 1-2 (Spline)",
    "Cox States 1-3",
    "Cox States 1-3 (Spline)")

levels(df$model) <- model_names
```

# Power

```{r}
colors <- 
  c('#1b9e77',
    '#d95f02',
    '#7570b3',
    '#e7298a',
    '#66a61e',
    '#e6ab02',
    '#a6761d',
    '#666666')

numbers <- c(1,1,1,7,5,6)
```


# Power

## Linear

```{r}
power <-
df |>
  filter(beta_tx == 0,
         beta_t_tx == -0.02) |>
  ggplot() +
  aes(x = type,
      y = power,
      color = model,
      shape = model) +
  geom_point() +
  facet_grid(tx_end ~ sample_size) +
  scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
  coord_cartesian(ylim = c(0,1)) +
  scale_color_manual(name = "Model",
                     labels = unique(df$model),
                     values=c(rep(colors[[1]], numbers[[1]]),
                              rep(colors[[2]], numbers[[2]]),
                              rep(colors[[3]], numbers[[3]]),
                              rep(colors[[4]], numbers[[4]]),
                              rep(colors[[5]], numbers[[5]]),
                              rep(colors[[6]], numbers[[6]])),) +
  scale_shape_manual(name = "Model",
                     labels = unique(df$model),
                     values=c(1:numbers[[1]],
                              1:numbers[[2]],
                              1:numbers[[3]],
                              1:numbers[[4]],
                              1:numbers[[5]],
                              1:numbers[[6]])) +
  labs(x = "", y = "Power",
       subtitle = "Treatment Effect: Linear effect to day X then constant",
       caption = "") +
  theme(axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1),
        strip.text.y = element_text(angle = 0))+
  cowplot::panel_border(size = 0.5) +
  cowplot::background_grid(size.major = 0.1,
                           size.minor = 0.1)
```

```{r}
ggsave(
  filename = "otm_sim_power_linear.png", 
  plot = power,
  bg = "white",
  device = ragg::agg_png,
  units="in",
  height = 9,
  width = 16,
  dpi = 600,
  scale = 1)
```


# Type I Error

```{r}
typeIerror <-
df |>
  filter(beta_tx == 0,
         beta_t_tx == 0) |>
  ggplot() +
  aes(x = type,
      y = power,
      color = model,
      shape = model) +
  geom_point() +
  geom_hline(yintercept = 0.05, linetype = 2) +
  facet_grid( ~ sample_size) +
  scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
  coord_cartesian(ylim = c(0,1)) +
  scale_color_manual(name = "Model",
                     labels = unique(df$model),
                     values=c(rep(colors[[1]], numbers[[1]]),
                              rep(colors[[2]], numbers[[2]]),
                              rep(colors[[3]], numbers[[3]]),
                              rep(colors[[4]], numbers[[4]]),
                              rep(colors[[5]], numbers[[5]]),
                              rep(colors[[6]], numbers[[6]])),) +
  scale_shape_manual(name = "Model",
                     labels = unique(df$model),
                     values=c(1:numbers[[1]],
                              1:numbers[[2]],
                              1:numbers[[3]],
                              1:numbers[[4]],
                              1:numbers[[5]],
                              1:numbers[[6]])) +
  labs(x = "",
       y = "Type I error",
       caption = "") +
  theme(axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1),
        strip.text.y = element_text(angle = 0))+
  cowplot::panel_border(size = 0.5) +
  cowplot::background_grid(size.major = 0.1,
                           size.minor = 0.1)
```

```{r}
ggsave(
  filename = "typeIerror.png", 
  plot = typeIerror,
  bg = "white",
  device = ragg::agg_png,
  units="cm",
  height = 14,
  width = 21.5,
  dpi=600,
  scale = 1)
```
